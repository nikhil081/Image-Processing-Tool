/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package image;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author nikma
 */
public class dis extends javax.swing.JFrame {

    /**
     * Creates new form dis
     */
    public dis() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        select = new javax.swing.JButton();
        greyscale = new javax.swing.JButton();
        label = new javax.swing.JLabel();
        mirror = new javax.swing.JButton();
        negative = new javax.swing.JButton();
        rotate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        select.setText("select");
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        greyscale.setText("greyscale");
        greyscale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greyscaleActionPerformed(evt);
            }
        });

        mirror.setText("mirror");
        mirror.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mirrorActionPerformed(evt);
            }
        });

        negative.setText("negative");
        negative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativeActionPerformed(evt);
            }
        });

        rotate.setText("rotate");
        rotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("IMAGE PROCESSING TOOL");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(greyscale)
                                .addComponent(negative, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mirror, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(select, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rotate, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(select)
                        .addGap(18, 18, 18)
                        .addComponent(greyscale)
                        .addGap(18, 18, 18)
                        .addComponent(mirror)
                        .addGap(18, 18, 18)
                        .addComponent(negative)
                        .addGap(18, 18, 18)
                        .addComponent(rotate)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
        JFileChooser jf = new JFileChooser();
        jf.setCurrentDirectory(new File(System.getProperty("user.home")));
        int res = jf.showSaveDialog(jf);
        if(res == JFileChooser.APPROVE_OPTION){
            File  g = jf.getSelectedFile();
            String path = g.getAbsolutePath();
          ImageIcon img = new ImageIcon(path);
          label.setIcon(img);
            
        }
        
    }//GEN-LAST:event_selectActionPerformed

    private void greyscaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greyscaleActionPerformed
          BufferedImage img = null;
            File f = null;
        JFileChooser jf = new JFileChooser();
        jf.setCurrentDirectory(new File(System.getProperty("user.home")));
        int res = jf.showSaveDialog(jf);
        if(res == JFileChooser.APPROVE_OPTION){
              try {
                  File  g = jf.getSelectedFile();
                  String path = g.getAbsolutePath();
               
                  f = new File(path);
                  img = ImageIO.read(f);
              } catch (IOException ex) {
                  Logger.getLogger(dis.class.getName()).log(Level.SEVERE, null, ex);
              }
            int width = img.getWidth();
        int height = img.getHeight();
        for (int i = 0; i < height; i++){
            for (int j = 0; j < width; j++) {
                Color c = new Color(img.getRGB(j, i));
                int red = c.getRed();
		int green = c.getGreen();
                int blue = c.getBlue();
                int r = (red + blue+ green)/3;
		Color newColor = new Color(r,r,r);
		img.setRGB(j, i, newColor.getRGB());
             ImageIcon icon = new ImageIcon(img);
             label.setIcon(icon);
    
		}
    }//GEN-LAST:event_greyscaleActionPerformed
        }}
    private void mirrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mirrorActionPerformed
         BufferedImage img = null;
            File f = null;
        JFileChooser jf = new JFileChooser();
        jf.setCurrentDirectory(new File(System.getProperty("user.home")));
        int res = jf.showSaveDialog(jf);
        if(res == JFileChooser.APPROVE_OPTION){
              try {
                  File  g = jf.getSelectedFile();
                  String path = g.getAbsolutePath();
                
                  f = new File(path);
                  img = ImageIO.read(f);
              } catch (IOException ex) {
                  Logger.getLogger(dis.class.getName()).log(Level.SEVERE, null, ex);
              }
            int width = img.getWidth();
        int height = img.getHeight();
         BufferedImage mimg = new BufferedImage(width*2, height, BufferedImage.TYPE_INT_ARGB);
        
        
        for(int y = 0; y < height; y++){
            for(int lx = 0, rx = width*2 - 1; lx < width; lx++, rx--){
               
                               Color c = new Color(img.getRGB(lx, y));

                
                
                mimg.setRGB(lx, y, c.getRGB());
                mimg.setRGB(rx, y, c.getRGB());
            }
        }
             ImageIcon icon = new ImageIcon(mimg);
             label.setIcon(icon);
        
    }                                      
    }//GEN-LAST:event_mirrorActionPerformed

    private void negativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeActionPerformed
        BufferedImage img = null;
       
        JFileChooser jf = new JFileChooser();
        jf.setCurrentDirectory(new File(System.getProperty("user.home")));
        int res = jf.showSaveDialog(jf);
        if(res == JFileChooser.APPROVE_OPTION){
              try {
                  File  g = jf.getSelectedFile();
                  String path = g.getAbsolutePath();
                
                File f = new File(path);
                  img = ImageIO.read(f);
              } catch (IOException ex) {
                  Logger.getLogger(dis.class.getName()).log(Level.SEVERE, null, ex);
              }
            int width = img.getWidth();
        int height = img.getHeight();
         for(int y = 0; y < height; y++){
            for(int x = 0; x < width; x++){
                 Color c = new Color(img.getRGB(x, y));
                 int red = c.getRed();
                 int green = c.getGreen();
                int blue = c.getBlue();
                 int r = 255 - red;
                int g = 255 - green;
                int b = 255 - blue;
                Color newColor = new Color(r,g,b);
		img.setRGB(x, y, newColor.getRGB());
            }
             ImageIcon icon = new ImageIcon(img);
             label.setIcon(icon);
        
    }                                      
    }//GEN-LAST:event_negativeActionPerformed
    }
    private void rotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateActionPerformed
       rotator e = new rotator();
       e.setVisible(true);
       
    }//GEN-LAST:event_rotateActionPerformed
        
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton greyscale;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel label;
    private javax.swing.JButton mirror;
    private javax.swing.JButton negative;
    private javax.swing.JButton rotate;
    private javax.swing.JButton select;
    // End of variables declaration//GEN-END:variables
}
